# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1paFQRtmnJ6agRbAuY2peWWQT2QGOj7uC
"""




import streamlit as st
import pandas as pd
import numpy as np
import shap
import matplotlib.pyplot as plt
from xgboost import XGBRegressor
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split

# Load dataset
df = pd.read_csv('concrete.csv')
df.drop_duplicates(inplace=True)
df['w/c_ratio'] = df['water'] / df['cement']
df.drop(['water', 'cement'], axis=1, inplace=True)
df['age'] = df['age'].astype(str)
df['slag'] = df['slag'].apply(np.sqrt)
df['superplastic'] = df['superplastic'].apply(np.sqrt)

X = df.drop('strength', axis=1)
y = df['strength']

# Preprocessing
one_hot_cols = ['age']
numeric_features = ['w/c_ratio', 'slag', 'ash', 'superplastic', 'coarseagg', 'fineagg']

one_hot_transform = Pipeline(steps=[('oneHot', OneHotEncoder(handle_unknown='ignore'))])
numeric_transform = Pipeline(steps=[('scaler', StandardScaler())])

preprocessor = ColumnTransformer(transformers=[
    ('one_hot', one_hot_transform, one_hot_cols),
    ('num', numeric_transform, numeric_features)
])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)

# Train XGBoost model
model = XGBRegressor(objective='reg:squarederror', n_estimators=300)
pipeline = Pipeline(steps=[('preprocess', preprocessor), ('model', model)])
pipeline.fit(X_train, y_train)

# SHAP explainer setup
X_transformed = preprocessor.fit_transform(X)
feature_names = preprocessor.get_feature_names_out()
X_df_transformed = pd.DataFrame(X_transformed, columns=feature_names)
explainer = shap.Explainer(model.predict, X_df_transformed)

# Streamlit UI
st.title("ðŸ”® Concrete Strength Prediction App")
st.markdown("Enter the mix design parameters to predict the concrete strength (MPa):")

slag = st.number_input("Slag (kg/mÂ³)", 0.0, 400.0, step=1.0)
ash = st.number_input("Fly Ash (kg/mÂ³)", 0.0, 300.0, step=1.0)
superplastic = st.number_input("Superplasticizer (kg/mÂ³)", 0.0, 30.0, step=0.5)
coarseagg = st.number_input("Coarse Aggregate (kg/mÂ³)", 800.0, 1200.0, step=10.0)
fineagg = st.number_input("Fine Aggregate (kg/mÂ³)", 500.0, 1000.0, step=10.0)
water = st.number_input("Water (kg/mÂ³)", 100.0, 250.0, step=1.0)
cement = st.number_input("Cement (kg/mÂ³)", 100.0, 600.0, step=1.0)
age = st.selectbox("Age (days)", options=sorted(df['age'].unique()))

if st.button("Predict"):
    wcr = water / cement
    input_data = pd.DataFrame([{
        "slag": np.sqrt(slag),
        "ash": ash,
        "superplastic": np.sqrt(superplastic),
        "coarseagg": coarseagg,
        "fineagg": fineagg,
        "w/c_ratio": wcr,
        "age": age
    }])
    prediction = pipeline.predict(input_data)[0]
    st.success(f"ðŸ§± Predicted Strength: {prediction:.2f} MPa")

    input_transformed = preprocessor.transform(input_data)
    input_df_transformed = pd.DataFrame(input_transformed, columns=feature_names)
    shap_value = explainer(input_df_transformed)

    st.set_option('deprecation.showPyplotGlobalUse', False)
    st.subheader("SHAP Waterfall Explanation")
    shap.plots.waterfall(shap_value[0], show=False)
    st.pyplot(bbox_inches='tight')
